var documenterSearchIndex = {"docs":
[{"location":"tutorials/multigroup/#How-to-fit-a-multigroup-model","page":"How to fit a multigroup model","title":"How to fit a multigroup model","text":"","category":"section"},{"location":"tutorials/high_level/#Using-the-high-level-interface","page":"Using the high-level interface","title":"Using the high-level interface","text":"","category":"section"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"We will fit the following example model:","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"– include image here –","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"We can use the StenoGraph package to define our model, which has a similar syntax to the R-package lavaan:","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"observed_vars = [:x1, :x2, :x3, :y1, :y2, :y3]\nlatent_vars = [:ξ, :η]\n\ngraph = @StenoGraph begin\n    # loadings and regressions\n    [fixed(1)*x1, x2, x3] ← ξ → η → [fixed(1)*y1, y2, y3]\n    # variances\n    _(observed_vars) ↔ _(observed_vars)\n    _(latent_vars) ↔ _(latent_vars)\nend","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"We then use this graph to define a ParameterTable object:","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"partable = ParameterTable(\n    latent_vars = latent_vars, \n    observed_vars = observed_vars, \n    graph = graph)","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"We will use the example data from our package","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"– load example data –","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"And specify our model as","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"model = Sem(\n    specification = partable,\n    data = dat\n)","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"We can now fit the model via","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"model_fit = sem_fit(model)","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"and compute fit measures and standard errors via","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"fitmeasures(model_fit)\nse(model_fit)","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"we can also update the parameter table ","category":"page"},{"location":"tutorials/high_level/","page":"Using the high-level interface","title":"Using the high-level interface","text":"– update partable –","category":"page"},{"location":"tutorials/collection/#How-to-fit-sums-of-SEMS","page":"How to fit sums of SEMS","title":"How to fit sums of SEMS","text":"","category":"section"},{"location":"#StructuralEquationModes.jl:-a-fast-and-flexible-SEM-framework","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"","category":"section"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"This is a package for Structural Equation Modeling. It is still in development. Models you can fit include","category":"page"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"Linear SEM that can be specified in RAM notation\nML, GLS and FIML estimation\nRidge Regularization\nMultigroup SEM\nSums of arbitrary loss functions (everything the optimizer can handle)","category":"page"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"We provide fast objective functions, gradients, and for some cases hessians as well as approximations thereof. As a user, you can easily define custom loss functions. For those, you can decide to provide analytical gradients or use finite difference approximation / automatic differentiation. You can choose to mix and match loss functions natively found in this package and those you provide. In such cases, you optimize over a sum of different objectives (e.g. ML + Ridge). This mix and match strategy also applies to gradients, where you may supply analytic gradients or opt for automatic differentiation or mix analytical and automatic differentiation.","category":"page"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"You may consider using this package if:","category":"page"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"you want to extend SEM (e.g. add a new objective function) and need an extendable framework\nyou want to extend SEM, and your implementation needs to be fast (because you want to do a simulation, for example)\nyou want to fit the same model(s) to many datasets (bootstrapping, simulation studies)\nyou are planning a study and would like to do power simulations","category":"page"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"For examples on how to use the package, see the Tutorials.","category":"page"},{"location":"#Installation","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"Installation","text":"","category":"section"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"To install the latest version from GitHub, use the following commands in your julia REPL:","category":"page"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"using Pkg\nPkd.add(\"https://github.com/StructuralEquationModels/StructuralEquationModels.jl\")","category":"page"},{"location":"#Citing-the-package","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"Citing the package","text":"","category":"section"},{"location":"","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModes.jl: a fast and flexible SEM framework","text":"AbstractSem\nSemLoss\nSem\nSemObs\nSemLossFunction\nSemImply","category":"page"},{"location":"#StructuralEquationModels.AbstractSem","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModels.AbstractSem","text":"Most abstract supertype for all SEMs\n\n\n\n\n\n","category":"type"},{"location":"#StructuralEquationModels.SemLoss","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModels.SemLoss","text":"SemLoss(args...; ...)\n\nConstructs the loss field of a SEM. Can contain multiple SemLossFunctions, the model is optimized over their sum. See also SemLossFunction.\n\nArguments\n\nargs...: Multiple SemLossFunctions.\n\nExamples\n\nmy_ml_loss = SemML(...)\nmy_ridge_loss = SemRidge(...)\nmy_loss = SemLoss(SemML, SemRidge)\n\n\n\n\n\n","category":"type"},{"location":"#StructuralEquationModels.Sem","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModels.Sem","text":"Sem(;observed = SemObsCommon, imply = RAM, loss = (SemML,), diff = SemDiffOptim, kwargs...)\n\nConstructor for the basic Sem type. All additional kwargs are passed down to the constructors for the fields.\n\nArguments\n\nobserved: isa SemObs or a constructor.\nimply: isa SemImply or a constructor.\nloss: Tuple of objects that are SemLossFunctions or constructors.\nobserved: isa SemObs or a constructor.\n\nReturns a struct of type Sem with fields\n\nobserved::SemObs: Stores observed data, sample statistics, etc. See also SemObs.\nimply::SemImply: Computes Σ, μ, etc. See also SemImply.\nloss::SemLoss: Computes the objective and gradient of a sum of loss functions. See also SemLoss.\ndiff::SemDiff: Connects the model to the optimizer. See also SemDiff.\n\n\n\n\n\n","category":"type"},{"location":"#StructuralEquationModels.SemObs","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModels.SemObs","text":"Supertype of all objects that can serve as the observed field of a SEM. Pre-processes data and computes sufficient statistics for example. If you have a special kind of data, e.g. ordinal data, you should implement a subtype of SemObs.\n\n\n\n\n\n","category":"type"},{"location":"#StructuralEquationModels.SemLossFunction","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModels.SemLossFunction","text":"Supertype for all loss functions of SEMs. If you want to implement a custom loss function, it should be of this type.\n\n\n\n\n\n","category":"type"},{"location":"#StructuralEquationModels.SemImply","page":"StructuralEquationModes.jl: a fast and flexible SEM framework","title":"StructuralEquationModels.SemImply","text":"Supertype of all objects that can serve as the imply field of a SEM. Computed model-implied values that should be compared with the observed data to find parameter estimates, e. g. the model implied covariance or mean. If you would like to implement a different notation, e.g. LISREL, you should implement a subtype of SemImply.\n\n\n\n\n\n","category":"type"},{"location":"tutorials/build_by_parts/#Building-a-model-by-parts","page":"Building a model by parts","title":"Building a model by parts","text":"","category":"section"}]
}
